---
title: "Session 4 - Solutions"
author: "L. Wegner"
format: 
  html:
    self-contained: true
    theme: minty
editor: visual
---

# Solution

```{r}
# the function drinking_age helps a bartender to decide what kind of drink to hand out to a person based on their age
# the function drinking_age accepts numbers, other values lead to an error-message
drinking_age <- function(age) {
  if (!is.numeric(age) || age < 0) {
    return("Error!") # checks, if person typed something other than a number or has written a negative number
  }
  # new if-clause is created
  #checks, if person is between 0 and 15 years
  if (age < 16) {
    return("Too young")
  } else if (age < 18) { # else if for second check; checks if person is below 18 (so 16 years or 17years since all cases below 16 have already been cought by first-condition)
    return("Beer and wine")
  } else { # else for final check
    return("All good")
  }
}


```

## 1. Identify at least three issues with the provided code example in terms of documentation and variable naming.

-   Lack of comments: There are no comments explaining the purpose of the functions or the logic within them.
    -   *if clauses and age-checks are explained in the comments*
-   Unclear variable names: Variable names like `a` don't provide clear indications of their purpose or content.
    -   *changing the name of a to age*
    -   *changing the function name from f to drinking_age*
-   Absence of function description: There's no documentation specifying what the function does or what input it expects:
    -   *the function drinking_age helps a bartender to decide what kind of drink to hand out to a person based on their age*
    -   *the function drinking_age accepts numbers, other values lead to an error-message*

## 2. Why is it important to have clear and descriptive variable names in code for reproducible research?

-   enhance code readability and understanding for both the coder and collaborators

-   descriptive variable names contribute to transparency making it easier for others to follow the logic and replicate the analysis without confusion or misinterpretation

## 3. How does adding comments to code contribute to the reproducibility of research?

-   Comments provide crucial insights into the logic, purpose, and functionality of the code
-   Comments serve as documentation, guiding others through the code base
-   Comments explain the logic behind specific steps, functions, or calculations, facilitating replication and comprehension of the research process.