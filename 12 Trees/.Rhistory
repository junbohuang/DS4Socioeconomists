rm(list=ls())
# load packages/libraries
install.packages("rpart")
library(rpart) # for creating trees
library(rpart.plot) # for plotting trees
install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
#load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
model <- rpart(
formula = price~.,
data=airbnb_data,
method = "anova"
)
summary(model)
rpart.plot(model)
plotcp(model)
View(airbnb_data)
airbnb$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
classtree <- rpart(
formula = high_rating~.,
data=airbnb_data,
method = "class"
)
rpart.plot(classtree)
rm(list=ls())
library(rpart) # for creating trees
library(rpart.plot) # for plotting trees
library(sozoekds)
library(dplyr)
airbnb_data <- airbnbsmall # store data as "airbnb_data"
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
classtree <- rpart(
formula = airbnb_data$high_rating~.,
data=airbnb_data,
method = "class"
)
rpart.plot(classtree)
classtree <- rpart(
formula = airbnb_data$high_rating~.,
data=airbnb_data,
method = "anova"
)
rpart.plot(classtree)
classtree <- rpart(
formula = d_gym~.,
data=airbnb_data,
method = "class"
)
rpart.plot(classtree)
regtree <- rpart(
formula = price~.,
data=airbnb_data,
method = "anova"
)
#summary(regtree)
rpart.plot(regtree)
airbnb_data$high_rating = factor(ifelse(airbnb_data$n_review_scores_rating>94, 1, 0))
View(airbnb_data)
rm(list=ls())
library(rpart) # for creating trees
library(rpart.plot) # for plotting trees
library(sozoekds)
library(dplyr)
#load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
airbnb_data$high_rating = (ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
View(airbnb_data)
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
View(airbnb_data)
str(high_rating)
str(airbnb_data$high_rating)
airbnb_data$high_rating = factor(ifelse(airbnb_data$n_review_scores_rating>94, 1, 0))
str(airbnb_data$high_rating)
classtree <- rpart(
formula = high_rating~.,
data=airbnb_data,
method = "class"
)
rpart.plot(classtree)
classtree <- rpart(
formula = airbnb_data$high_rating~.,
data=airbnb_data,
method = "class"
)
rpart.plot(classtree)
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
#load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
##################
# 1. Regression tree
regtree <- rpart(
formula = price~.,
data=airbnb_data,
method = "anova"
)
regtree
rpart.plot(regtree)
mean(airbnb_data$price)
regtree <- rpart( # use rpart command to fit a tree
formula = price~., # full model explaining price
data=airbnb_data, # using airbnb data
method = "anova", # method used for conitnuous variables
control = list(cp = 0, xval = 10)
)
regtree <- rpart( # use rpart command to fit a tree
formula = price~., # full model explaining price
data=airbnb_data, # using airbnb data
method = "anova", # method used for conitnuous variables
control = list(cp = 0, xval = 10)
)
rpart.plot(regtree)
rpart.plot(regtree)
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
library(caret) # for splitting
# load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
# binary variable "high rating"
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
airbnb_data_2 <- select(airbnb_data, -n_review_scores_rating) # remove "n_review_scores_rating"
y <- airbnb_data_2$high_rating # defines y as "high_rating" in the airbnb dataset
# split data into test & training
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(y, p = 0.7, # percentage of data going to training
list = FALSE,
times = 1) # only 1 split
train <- airbnb_data_2[trainIndex,] # training data
test <- airbnb_data_2[-trainIndex,] # test data
# train the tree
classtree <- rpart(
formula = high_rating~.,
data=train, # this time using training data
method = "class", # this time using a classification tree as dependent variable is binary
)
classtree # prints the tree
mean(train$high_rating)
rpart.plot(classtree) # plots the tree
train_predict <- predict(classtree, data=train, type="class")
tab1 <- table(predict = train_predict, actual = train$high_rating)
confusionMatrix(tab1, mode = "prec_recall")
test_predict <- predict(classtree, newdata=test, type="class")
tab2 <- table(predict = test_predict, actual = test$high_rating)
confusionMatrix(tab2, mode = "prec_recall")
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
library(caret) # for splitting
install.packages("pdp")
library(pdp)
# load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
# binary variable "high rating"
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
airbnb_data_2 <- select(airbnb_data, -n_review_scores_rating) # remove "n_review_scores_rating"
y <- airbnb_data_2$high_rating # defines y as "high_rating" in the airbnb dataset
# split data into test & training
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(y, p = 0.7, # percentage of data going to training
list = FALSE,
times = 1) # only 1 split
train <- airbnb_data_2[trainIndex,] # training data
test <- airbnb_data_2[-trainIndex,] # test data
# 2. Classification tree
# train the tree
classtree <- rpart(
formula = high_rating~.,
data=train, # this time using training data
method = "class", # this time using a classification tree as dependent variable is binary
)
pdp_plot <- partial(classtree, pred.var = n_bathrooms, plot = TRUE)
pdp_plot <- partial(classtree, pred.var = train$n_bathrooms, plot = TRUE)
pdp_plot <- partial(classtree, pred.var = train$n_bathrooms, plot = TRUE)
pdp_plot <- partial(classtree, pred.var = airbnb_data_2$n_bathrooms, plot = TRUE)
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
library(caret) # for splitting
# load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
# binary variable "high rating"
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
airbnb_data_2 <- select(airbnb_data, -n_review_scores_rating) # remove "n_review_scores_rating"
y <- airbnb_data_2$high_rating # defines y as "high_rating" in the airbnb dataset
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(y, p = 0.7, # percentage of data going to training
list = FALSE,
times = 1) # only 1 split
train <- airbnb_data_2[trainIndex,] # training data
test <- airbnb_data_2[-trainIndex,] # test data
# 2. Classification tree
# train the tree
classtree <- rpart(
formula = high_rating~.,
data=train, # this time using training data
method = "class", # this time using a classification tree as dependent variable is binary
)
# plot the tree
classtree # prints the tree
rpart.plot(classtree) # plots the tree
# 3. Evaluation
# training confusion matrix
train_predict <- predict(classtree, data=train, type="class")
tab1 <- table(predict = train_predict, actual = train$high_rating)
confusionMatrix(tab1, mode = "prec_recall")
# testing confusion matrix
test_predict <- predict(classtree, newdata=test, type="class")
tab2 <- table(predict = test_predict, actual = test$high_rating)
confusionMatrix(tab2, mode = "prec_recall")
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
#load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
##################
# 1. Regression tree
regtree <- rpart( # use rpart command to fit a tree
formula = price~., # full model explaining price
data=airbnb_data, # using airbnb data
method = "anova", # method used for conitnuous variables
# control = list(cp = 0, xval = 10) # would fit uncut tree
)
# print
regtree
# plot
rpart.plot(regtree)
rm(list=ls())
# load packages/libraries
#install.packages("rpart")
library(rpart) # for creating trees
#install.packages("rpart.plot")
library(rpart.plot) # for plotting trees
#remotes::install_gitlab("BAQ6370/sozoekds", host="gitlab.rrz.uni-hamburg.de")
library(sozoekds)
library(dplyr)
library(caret) # for splitting
# load data
airbnb_data <- airbnbsmall # store data as "airbnb_data"
airbnb_data$high_rating = ifelse(airbnb_data$n_review_scores_rating>94, 1, 0)
airbnb_data_2 <- select(airbnb_data, -n_review_scores_rating) # remove
y <- airbnb_data_2$high_rating # defines y as "high_rating" in the airbnb dataset
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(y, p = 0.7, # percentage of data going to training
list = FALSE,
times = 1) # only 1 split
train <- airbnb_data_2[trainIndex,] # training data
test <- airbnb_data_2[-trainIndex,] # test data
classtree <- rpart(
formula = high_rating~.,
data=train, # this time using training data
method = "class", # this time using a classification tree as dependent variable is binary
)
rpart.plot(classtree) # plots the tree
train_predict <- predict(classtree, data=train, type="class")
tab1 <- table(predict = train_predict, actual = train$high_rating)
confusionMatrix(tab1, mode = "prec_recall")
test_predict <- predict(classtree, newdata=test, type="class")
tab2 <- table(predict = test_predict, actual = test$high_rating)
confusionMatrix(tab2, mode = "prec_recall")
rm(list=ls())
library(rpart)
library(rpart.plot)
library(dplyr)
library(readstata13)
library(haven)
data <- read_dta("K:/Diss/perception_project/JRC_ispra/data/mergeddata_6.dta")
regtree <- rpart(
formula = pc_gender~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + nationality + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
rpart.plot(regtree)
regtree <- rpart(
formula = pc_gender~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
regtree <- rpart(
formula = pc_gender~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
rpart.plot(regtree)
rm(list=ls())
library(rpart)
library(rpart.plot)
library(dplyr)
library(readstata13)
library(haven)
data <- read_dta("K:/Diss/perception_project/JRC_ispra/data/mergeddata_6.dta")
regtree <- rpart(
formula = pc_gender~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
# plot
rpart.plot(regtree)
regtree <- rpart(
formula = pc_education~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
# plot
rpart.plot(regtree)
regtree <- rpart(
formula = pc_hardwork ~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
# plot
rpart.plot(regtree)
regtree <- rpart(
formula = pc_family ~ country_numeric+ cohort + real_iop + real_family + real_education + real_hardwork + real_gender + woman + educ_level_3 + educ_father_3 + educ_mother_3 + working + occu_4 + fin_diff_2 + marital + locality + regions + euimage_2 + perc_lifefair_original + perc_getdeserved_original + ineq_excessive_original + ineq_government_original + educ_end_age + hh_size + national_country + income_quintiles + internetuse + mobility_father + mobility_mother + educ_parents + mobility, # full model explaining price
data = data,
method = "anova"
)
# plot
rpart.plot(regtree)
rm(list=ls())
install.packages("remotes")
library(remotes)
remotes::install_gitlab("BAQ6370/sozoekdsexam", host="gitlab.rrz.uni-hamburg.de")
force = TRUE
rm(list=ls())
install.packages("devtools")
library(devtools)
devtools::install_git("https://gitlab.rrz.uni-hamburg.de/baq6370/sozoekdsexam.git")
rm(list=ls())
library(remotes)
remotes::install_gitlab("BAQ6370/sozoekdsexam", host="gitlab.rrz.uni-hamburg.de")
data <- examscores
