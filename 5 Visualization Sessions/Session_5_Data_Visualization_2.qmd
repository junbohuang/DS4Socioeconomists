---
title: "Recap and Visualization Part II"
author: "L. Wegner & J. Huang"
format: 
  html:
    self-contained: true
    theme: minty
editor: visual
---

# Agenda for today

1)  Knowledge Check List
2)  Recap on JupyterHub and Quarto - setting up a document and working in it
3)  Walkthrough: Plotting with ggplot2
4)  Advanced plotting task

# Check List

We are currently in week 7/14 - so halfway done!

Today's session serves the purpose to make sure that you have all the skills to master the second half of the course.

By now you should know how to do these elements:

| element:                                                              | content of exercise: |
|----------------------------------------------------|--------------------|
| log into the JupyterHub                                               | ex. 2                |
| create a new Quarto Doc in a folder                                   | ex. 2                |
| use the visual editing mode                                           | ex. 2                |
| insert elements like bullet points and pictures                       | ex. 2                |
| insert executable cells and execute them                              | ex. 2                |
| save and render the Quarto document                                   | ex. 2                |
| install a package and add it to the library                           | ex. 3                |
| read a package/function description                                   | ex. 3                |
| load data from a package                                              | ex. 3                |
| use a function from a package                                         | ex. 3                |
| write a (simple) function                                             | ex. 3/ex. 4          |
| use if-else-statements                                                | ex. 3/ex. 4          |
| identify different data types                                         | ex. 3/ex. 4          |
| create new variables                                                  | ex. 3/ex. 4          |
| create factor variables from character-values (like party-preference) | ex. 3/ex. 4          |
| do descriptive analysis with mean(), min(), range(), median() etc.    | ex. 3/ex. 4          |
| insert comments                                                       | ex. 4                |
| create a simple line-/dot-plot with ggplot2                           | ex. 5                |
| add colors to the plot                                                | ex. 5                |
| add headlines and axis labels to the plot                             | ex. 5                |

Additional information on the elements that you should know by now can be found at OpenOlat under "helpful stuff" and in the course materials for the respective sessions listed above.

::: callout-caution
If you are not familiar with the elements listed above please repeat them! These are the basics that you will need to follow along through the remaining course.
:::

# Recap on JupyterHub and Quarto - setting up a document and working in it

live walkthrough

Important points:

-   create new file by clicking: file - new file - Quarto Document

-   work in visual mode

-   coding takes place in executable chunks

-   creation of code chunks: insert - executable cell - R OR strg+alt+i / ctrl+alt+i

    ```{r}
    x <- 2 + 2
    print(x)
    ```

-   clicking on green play symbol in code chunk runs the code

-   save by clicking on disk-symbol

# Walkthrough: Plotting with ggplot2

Steps to take before plotting:

1.  What kind of packages do I need? ➡️ install (if not used before) and add to library (always)
2.  Where is my data stored?
3.  How is my data structured? Do I need to transform variables before plotting?

## Lets go!

### 1) Load packages

#### *Are they pre-installed?*

I can check by clicking on packages in the lower right panel and type the package name ➡️ if the package is listed there, I just need to use the library(packagename) command

➡️ if the package is not listed there, I need to use install.packages("packagename") and then library(packagename)

```{r}
#install.packages("devtools")
library(devtools)
#devtools::install_git("https://gitlab.rrz.uni-hamburg.de/baq6370/sozoekds.git")
```

Please note: "packagename" when the package is new/unknown (in install.package), packagename without " when loading to library

In the following sessions this code is all you need for loading the package:

```{r}
library(sozoekds)
```

#### *Do I need additional packages for specific data types/purposes?*

-   readr is used for reading in text data
-   ggplot2 is used for plotting

```{r}
#install.packages("ggplot2")
library(ggplot2)
```

### 2) Where is my data stored?

-   In our case: data is stored in package
-   data might also come from the web or my own computer
-   I should know the type and then look up what package/function I need to read it in
-   helpful links for readr package:
    -   <https://readr.tidyverse.org/>
    -   <https://r4ds.had.co.nz/data-import.html>
-   Links to csv files from New Zealands government: <https://www.stats.govt.nz/large-datasets/csv-files-for-download/> (no further use in course, just for trying things our)

```{r}
library(readr)
survey_climatechange_2023 <- read_csv("https://www.stats.govt.nz/assets/Uploads/Business-operations-survey/Business-operations-survey-2023/Download-data/business-operations-survey-2023-climate-change.csv")
head(survey_climatechange_2023)
```

### 3) How is my data structured?

Going back to the course-data-package sozoekds and the dataset examscores

a closer look at the gender of the participants:

```{r}
examscores <- examscores
head(examscores)
summary(examscores$Gender)
unique(examscores$Gender)
examscores$Gender <- as.factor(examscores$Gender)
```

a closer look at the MathScore of the participants:

```{r}
summary(examscores$MathScore)
```

### 4) Plotting

#### *Math Score*

***bar-chart***

| I have chosen a bar-chart to visualize the distribution of the Math Score. This kind of plot shows the number of cases for each Score with its height.
| I can see that the values are almost normal distributed while the most students have a score between 60 and 65 points.
|  + Additionally I could add colors, add the median, the average score and the range most observations fall into (95%).

the most basic plot

```{r}
library(ggplot2)
ggplot(data=examscores, mapping = aes(x=MathScore)) +
  geom_bar()
```

Adding title and color

```{r}
ggplot(data=examscores, mapping = aes(x=MathScore)) +
  geom_bar(fill = "darkgreen") +
  labs(x="Math Score", y="number of students", title = "Distribution of the Math Score")
  
  
```

Adding bin-sizes for easier readability:

```{r}
ggplot(examscores, aes(x = MathScore)) +
  geom_bar() +
  scale_x_binned(n.breaks = 20) +
  labs(x = "Score", y = "Number of students") +
  ggtitle("Distribution of Math Scores") +
    theme_minimal()
```

***Boxplot***

```{r}
ggplot(examscores, aes(y = MathScore)) +
  geom_boxplot() +
  labs(y = "Math Score")
```

| I chose a boxplot that " visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually." (see description)
| The box shows the 2nd and 3rd quantile - the "middle 50%" of my observation. The horizontal line shows the median score - which is around 64.
| I can see that there are a few out-liners in the lower part of my plot and that the scores mostly range from 25 to 100.

#### Gender

***Boxplot***

```{r}
library(sozoekds)
library(ggplot2)
exam_score <- examscores
# we can do this plot for all the different scores by changing the y-variable
ggplot(exam_score, aes(x=Gender, y=MathScore)) +
  geom_boxplot() +
  labs(y = "Score") +
  ggtitle("Distribution of Math Scores")

```

| I chose a boxplot that " visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually." (see description)
| The box shows the 2nd and 3rd quantile - the "middle 50%" of my observation., this box is covering higher scores for the males than for the females. The horizontal line shows the median score - which is around 63 for the females and a bit higher (around 65) for the males. I can see that there are a few out-liners in the lower part of my plot and that the student with zero points was female. I can see that the scores range from 24 to 100 for the females and from 28 to 100 for the males.

#### ***Lineplot***

```{r}
library(RColorBrewer)

examscores$Gender <- as.factor(examscores$Gender)

# Create a plot
ggplot(examscores, aes(x = MathScore, y = after_stat(count), color = Gender)) +
  geom_line(stat = "count", linewidth=1) +
  labs(x = "Math Score", y = "Count", color = "Gender", title= "Math Scores for male and female students") +
     scale_color_brewer(palette = "Set2")
```

| I could also visualize the distribution with a lineplot. Here we can see that the distributions look quite familiar for males and females, but the female distribution seems to be slightly shifted to the left - which leads to lower math scores. Bot graphs have a similar peak-point at around 63.

# Advanced plotting task

1.  Revisit last weeks plots - how can you transform them with the principles we learned today?

Choose **one** of the two data sets and do the exercises regarding this set.

Cheat-Sheet

## ***California Housing*** {#sec-california-housing}

1.  Create a new variable called `Avg_Rooms` that displays the average amount of rooms in each household in a certain neighborhood (block)

*Hint: for one observation there might be 20 households, and 50 rooms in total - this leads to an average of 2.5 rooms per household*

2.  Plot Avg_Rooms against Median_Income - interpret the result

3.  Eliminate values in Avg_Rooms that are greater then 10 rooms from your data set - then plot task 2 again

4.  as before: Explain your decision of the type of visualization + Interpret the results

## ***Exam Score*** {#sec-exam-score}

1.  Create a new variable called `full_score` that is the mean score of all three testscores (Math, Reading, Writing)

2.  Calculate grades from the `full_score` using the american system ([hint here](https://en.wikipedia.org/wiki/Academic_grading_in_the_United_States))

3.  Plot the distribution of grades by number of study hours per week\
    Hint: create a factor variable from WklyStudyHours

    Hint: You could do this in one plot with multiple lines or in more than one graphic where all the plots are printed in one frame (<https://intro2r.com/mult_graphs.html>)

4.  as before: Explain your decision of the type of visualization + Interpret the results
